{"version":3,"file":"index.mjs","sources":["../../src/index.ts"],"sourcesContent":["import { transformAsync, TransformOptions } from '@babel/core';\nimport ts from '@babel/preset-typescript';\nimport solid from 'babel-preset-solid';\nimport { readFileSync } from 'fs';\nimport { mergeAndConcat } from 'merge-anything';\nimport { createRequire } from 'module';\nimport solidRefresh from 'solid-refresh/babel.js';\nimport type { Alias, AliasOptions, Plugin, UserConfig } from 'vite';\n\nconst require = createRequire(import.meta.url);\n\nconst runtimePublicPath = '/@solid-refresh';\nconst runtimeFilePath = require.resolve('solid-refresh/dist/solid-refresh.mjs');\nconst runtimeCode = readFileSync(runtimeFilePath, 'utf-8');\n\n/** Possible options for the extensions property */\nexport interface ExtensionOptions {\n  typescript?: boolean;\n}\n\n/** Configuration options for vite-plugin-solid. */\nexport interface Options {\n  /**\n   * This will inject solid-js/dev in place of solid-js in dev mode. Has no\n   * effect in prod. If set to `false`, it won't inject it in dev. This is\n   * useful for extra logs and debugging.\n   *\n   * @default true\n   */\n  dev: boolean;\n  /**\n   * This will force SSR code in the produced files. This is experiemental\n   * and mostly not working yet.\n   *\n   * @default false\n   */\n  ssr: boolean;\n  /**\n   * This will inject HMR runtime in dev mode. Has no effect in prod. If\n   * set to `false`, it won't inject the runtime in dev.\n   *\n   * @default true\n   */\n  hot: boolean;\n  /**\n   * This registers additional extensions that should be processed by\n   * vite-plugin-solid.\n   *\n   * @default undefined\n   */\n  extensions?: (string | [string, ExtensionOptions])[];\n  /**\n   * Pass any additional babel transform options. They will be merged with\n   * the transformations required by Solid.\n   *\n   * @default {}\n   */\n  babel:\n    | TransformOptions\n    | ((source: string, id: string, ssr: boolean) => TransformOptions)\n    | ((source: string, id: string, ssr: boolean) => Promise<TransformOptions>);\n  typescript: {\n    /**\n     * Forcibly enables jsx parsing. Otherwise angle brackets will be treated as\n     * typescript's legacy type assertion var foo = <string>bar;. Also, isTSX:\n     * true requires allExtensions: true.\n     *\n     * @default false\n     */\n    isTSX?: boolean;\n\n    /**\n     * Replace the function used when compiling JSX expressions. This is so that\n     * we know that the import is not a type import, and should not be removed.\n     *\n     * @default React\n     */\n    jsxPragma?: string;\n\n    /**\n     * Replace the function used when compiling JSX fragment expressions. This\n     * is so that we know that the import is not a type import, and should not\n     * be removed.\n     *\n     * @default React.Fragment\n     */\n    jsxPragmaFrag?: string;\n\n    /**\n     * Indicates that every file should be parsed as TS or TSX (depending on the\n     * isTSX option).\n     *\n     * @default false\n     */\n    allExtensions?: boolean;\n\n    /**\n     * Enables compilation of TypeScript namespaces.\n     *\n     * @default uses the default set by @babel/plugin-transform-typescript.\n     */\n    allowNamespaces?: boolean;\n\n    /**\n     * When enabled, type-only class fields are only removed if they are\n     * prefixed with the declare modifier:\n     *\n     * > NOTE: This will be enabled by default in Babel 8\n     *\n     * @default false\n     *\n     * @example\n     * ```ts\n     * class A {\n     *   declare foo: string; // Removed\n     *   bar: string; // Initialized to undefined\n     *    prop?: string; // Initialized to undefined\n     *    prop1!: string // Initialized to undefined\n     * }\n     * ```\n     */\n    allowDeclareFields?: boolean;\n\n    /**\n     * When set to true, the transform will only remove type-only imports\n     * (introduced in TypeScript 3.8). This should only be used if you are using\n     * TypeScript >= 3.8.\n     *\n     * @default false\n     */\n    onlyRemoveTypeImports?: boolean;\n\n    /**\n     * When set to true, Babel will inline enum values rather than using the\n     * usual enum output:\n     *\n     * This option differs from TypeScript's --isolatedModules behavior, which\n     * ignores the const modifier and compiles them as normal enums, and aligns\n     * Babel's behavior with TypeScript's default behavior.\n     *\n     * ```ts\n     *  // Input\n     *  const enum Animals {\n     *    Fish\n     *  }\n     *  console.log(Animals.Fish);\n     *\n     *  // Default output\n     *  var Animals;\n     *\n     *  (function (Animals) {\n     *    Animals[Animals[\"Fish\"] = 0] = \"Fish\";\n     *  })(Animals || (Animals = {}));\n     *\n     *  console.log(Animals.Fish);\n     *\n     *  // `optimizeConstEnums` output\n     *  console.log(0);\n     * ```\n     *\n     * However, when exporting a const enum Babel will compile it to a plain\n     * object literal so that it doesn't need to rely on cross-file analysis\n     * when compiling it:\n     *\n     * ```ts\n     * // Input\n     * export const enum Animals {\n     *   Fish,\n     * }\n     *\n     * // `optimizeConstEnums` output\n     * export var Animals = {\n     *     Fish: 0,\n     * };\n     * ```\n     *\n     * @default false\n     */\n    optimizeConstEnums?: boolean;\n  };\n  /**\n   * Pass any additional [babel-plugin-jsx-dom-expressions](https://github.com/ryansolid/dom-expressions/tree/main/packages/babel-plugin-jsx-dom-expressions#plugin-options).\n   * They will be merged with the defaults sets by [babel-preset-solid](https://github.com/solidjs/solid/blob/main/packages/babel-preset-solid/index.js#L8-L25).\n   *\n   * @default {}\n   */\n  solid: {\n    /**\n     * The name of the runtime module to import the methods from.\n     *\n     * @default \"solid-js/web\"\n     */\n    moduleName?: string;\n\n    /**\n     * The output mode of the compiler.\n     * Can be:\n     * - \"dom\" is standard output\n     * - \"ssr\" is for server side rendering of strings.\n     *\n     * @default \"dom\"\n     */\n    generate?: 'ssr' | 'dom';\n\n    /**\n     * Indicate whether the output should contain hydratable markers.\n     *\n     * @default false\n     */\n    hydratable?: boolean;\n\n    /**\n     * Boolean to indicate whether to enable automatic event delegation on camelCase.\n     *\n     * @default true\n     */\n    delegateEvents?: boolean;\n\n    /**\n     * Boolean indicates whether smart conditional detection should be used.\n     * This optimizes simple boolean expressions and ternaries in JSX.\n     *\n     * @default true\n     */\n    wrapConditionals?: boolean;\n\n    /**\n     * Boolean indicates whether to set current render context on Custom Elements and slots.\n     * Useful for seemless Context API with Web Components.\n     *\n     * @default true\n     */\n    contextToCustomElements?: boolean;\n\n    /**\n     * Array of Component exports from module, that aren't included by default with the library.\n     * This plugin will automatically import them if it comes across them in the JSX.\n     *\n     * @default [\"For\",\"Show\",\"Switch\",\"Match\",\"Suspense\",\"SuspenseList\",\"Portal\",\"Index\",\"Dynamic\",\"ErrorBoundary\"]\n     */\n    builtIns?: string[];\n  };\n}\n\nfunction getExtension(filename: string): string {\n  const index = filename.lastIndexOf('.');\n  return index < 0 ? '' : filename.substring(index);\n}\n\nexport default function solidPlugin(options: Partial<Options> = {}): Plugin {\n  let needHmr = false;\n  let replaceDev = false;\n  let projectRoot = process.cwd();\n\n  return {\n    name: 'solid',\n    enforce: 'pre',\n\n    config(userConfig, { command }): UserConfig {\n      // We inject the dev mode only if the user explicitely wants it or if we are in dev (serve) mode\n      replaceDev = options.dev === true || (options.dev !== false && command === 'serve');\n      projectRoot = userConfig.root;\n\n      // TODO: remove when fully removed from vite\n      const legacyAlias = normalizeAliases(userConfig.alias);\n\n      if (!userConfig.resolve) userConfig.resolve = {};\n      userConfig.resolve.alias = [\n        ...legacyAlias,\n        ...normalizeAliases(userConfig.resolve && userConfig.resolve.alias),\n      ];\n\n      // fix for bundling dev in production\n      const nestedDeps = replaceDev\n        ? ['solid-js', 'solid-js/web', 'solid-js/store', 'solid-js/html', 'solid-js/h']\n        : [];\n\n      return {\n        /**\n         * We only need esbuild on .ts or .js files.\n         * .tsx & .jsx files are handled by us\n         */\n        esbuild: { include: /\\.ts$/ },\n        resolve: {\n          conditions: ['solid', ...(replaceDev ? ['development'] : [])],\n          dedupe: nestedDeps,\n          alias: [{ find: /^solid-refresh$/, replacement: runtimePublicPath }],\n        },\n        optimizeDeps: {\n          include: nestedDeps,\n        },\n      } as UserConfig;\n    },\n\n    configResolved(config) {\n      needHmr = config.command === 'serve' && config.mode !== 'production' && options.hot !== false;\n    },\n\n    resolveId(id) {\n      if (id === runtimePublicPath) return id;\n    },\n\n    load(id) {\n      if (id === runtimePublicPath) return runtimeCode;\n    },\n\n    async transform(source, id, transformOptions) {\n      const isSsr = transformOptions && transformOptions.ssr;\n      const currentFileExtension = getExtension(id);\n\n      const extensionsToWatch = [...(options.extensions || []), '.tsx', '.jsx'];\n      const allExtensions = extensionsToWatch.map((extension) =>\n        // An extension can be a string or a tuple [extension, options]\n        typeof extension === 'string' ? extension : extension[0],\n      );\n\n      if (!allExtensions.includes(currentFileExtension)) {\n        return null;\n      }\n\n      const inNodeModules = /node_modules/.test(id);\n\n      let solidOptions: { generate: 'ssr' | 'dom'; hydratable: boolean };\n\n      if (options.ssr) {\n        if (isSsr) {\n          solidOptions = { generate: 'ssr', hydratable: true };\n        } else {\n          solidOptions = { generate: 'dom', hydratable: true };\n        }\n      } else {\n        solidOptions = { generate: 'dom', hydratable: false };\n      }\n\n      const opts: TransformOptions = {\n        babelrc: false,\n        configFile: false,\n        root: projectRoot,\n        filename: id,\n        sourceFileName: id,\n        presets: [[solid, { ...solidOptions, ...(options.solid || {}) }]],\n        plugins: needHmr && !isSsr && !inNodeModules ? [[solidRefresh, { bundler: 'vite' }]] : [],\n        sourceMaps: true,\n        // Vite handles sourcemap flattening\n        inputSourceMap: false as any,\n      };\n\n      // We need to know if the current file extension has a typescript options tied to it\n      const shouldBeProcessedWithTypescript = extensionsToWatch.some((extension) => {\n        if (typeof extension === 'string') {\n          return extension.includes('tsx');\n        }\n\n        const [extensionName, extensionOptions] = extension;\n        if (extensionName !== currentFileExtension) return false;\n\n        return extensionOptions.typescript;\n      });\n\n      if (shouldBeProcessedWithTypescript) {\n        opts.presets.push([ts, options.typescript || {}]);\n      }\n\n      // Default value for babel user options\n      let babelUserOptions: TransformOptions = {};\n\n      if (options.babel) {\n        if (typeof options.babel === 'function') {\n          const babelOptions = options.babel(source, id, isSsr);\n          babelUserOptions = babelOptions instanceof Promise ? await babelOptions : babelOptions;\n        } else {\n          babelUserOptions = options.babel;\n        }\n      }\n\n      const babelOptions = mergeAndConcat(babelUserOptions, opts) as TransformOptions;\n\n      const { code, map } = await transformAsync(source, babelOptions);\n\n      return { code, map };\n    },\n  };\n}\n\n/**\n * This basically normalize all aliases of the config into\n * the array format of the alias.\n *\n * eg: alias: { '@': 'src/' } => [{ find: '@', replacement: 'src/' }]\n */\nfunction normalizeAliases(alias: AliasOptions = []): Alias[] {\n  return Array.isArray(alias)\n    ? alias\n    : Object.entries(alias).map(([find, replacement]) => ({ find, replacement }));\n}\n"],"names":["require","createRequire","import","meta","url","runtimePublicPath","runtimeFilePath","resolve","runtimeCode","readFileSync","getExtension","filename","index","lastIndexOf","substring","solidPlugin","options","needHmr","replaceDev","projectRoot","process","cwd","name","enforce","config","userConfig","command","dev","root","legacyAlias","normalizeAliases","alias","nestedDeps","esbuild","include","conditions","dedupe","find","replacement","optimizeDeps","configResolved","mode","hot","resolveId","id","load","transform","source","transformOptions","isSsr","ssr","currentFileExtension","extensionsToWatch","extensions","allExtensions","map","extension","includes","inNodeModules","test","solidOptions","generate","hydratable","opts","babelrc","configFile","sourceFileName","presets","solid","plugins","solidRefresh","bundler","sourceMaps","inputSourceMap","shouldBeProcessedWithTypescript","some","extensionName","extensionOptions","typescript","push","ts","babelUserOptions","babel","babelOptions","Promise","mergeAndConcat","code","transformAsync","Array","isArray","Object","entries"],"mappings":"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"}