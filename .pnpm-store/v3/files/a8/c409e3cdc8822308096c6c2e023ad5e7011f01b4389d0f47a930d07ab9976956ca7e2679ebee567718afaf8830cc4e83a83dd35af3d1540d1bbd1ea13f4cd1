{
  "version": 3,
  "sources": ["../../src/index.ts"],
  "sourcesContent": ["import ts from \"typescript\";\r\nimport { writeFileSync, rmSync } from \"fs\";\r\nimport * as c from \"colorette\";\r\nimport { terser } from \"rollup-plugin-terser\";\r\nimport { resolve, dirname, parse } from \"path\";\r\nimport { mergeAndConcat } from \"merge-anything\";\r\nimport { nodeResolve } from \"@rollup/plugin-node-resolve\";\r\nimport { ModuleFormat, OutputOptions, RollupOptions } from \"rollup\";\r\nimport { babel, RollupBabelInputPluginOptions } from \"@rollup/plugin-babel\";\r\n\r\nfunction findClosestPackageJson(start = process.cwd(), level = 0) {\r\n  try {\r\n    const path = resolve(start, \"package.json\");\r\n    return require(path);\r\n  } catch {\r\n    return level >= 10 ? {} : findClosestPackageJson(dirname(start), level + 1);\r\n  }\r\n}\r\n\r\nfunction processOptions(options: Options, asSubPackage = true): RollupOptions {\r\n  const {\r\n    targets: buildTargets,\r\n    writePackageJson,\r\n    printInstructions,\r\n    babelOptions,\r\n    solidOptions,\r\n    mappingName,\r\n    ...rollupOptions\r\n  } = options;\r\n  const currentDir = process.cwd();\r\n  const targets = buildTargets || [\"esm\"];\r\n  const pkg = findClosestPackageJson(currentDir);\r\n  const extensions = [\".js\", \".ts\", \".jsx\", \".tsx\"];\r\n\r\n  const src = options.input || pkg.source;\r\n  if (!src) {\r\n    throw new Error(\r\n      'No input was provided. Please provide an input via the \"input\" option or via \"source\" in the package.json'\r\n    );\r\n  }\r\n\r\n  const { name: srcName } = parse(src);\r\n  const name = mappingName || srcName;\r\n\r\n  const external = [\r\n    ...Object.keys(pkg.dependencies || {}),\r\n    ...Object.keys(pkg.peerDependencies || {}),\r\n  ];\r\n\r\n  const babelTargets = pkg.browserslist || \"last 2 years\";\r\n\r\n  if (!src) {\r\n    throw new Error(\r\n      \"No input source found. You can add it to the `source` property in your `package.json` or feed it into the `input` option in the `withConfig` function.\"\r\n    );\r\n  }\r\n\r\n  const outputs: OutputOptions[] = [\r\n    {\r\n      format: \"cjs\",\r\n      file: asSubPackage ? resolve(`dist/${name}/index.common.js`) : undefined,\r\n      dir: asSubPackage ? undefined : resolve(\"dist/cjs\"),\r\n      sourcemap: true,\r\n    },\r\n    {\r\n      format: \"esm\",\r\n      file: asSubPackage ? resolve(`dist/${name}/index.module.js`) : undefined,\r\n      dir: asSubPackage ? undefined : resolve(\"dist/esm\"),\r\n      sourcemap: true,\r\n    },\r\n    {\r\n      name,\r\n      format: \"umd\",\r\n      file: asSubPackage ? resolve(`dist/${name}/index.umd.js`) : undefined,\r\n      dir: asSubPackage ? undefined : resolve(\"dist/umd\"),\r\n      sourcemap: true,\r\n      plugins: [terser()],\r\n    },\r\n  ];\r\n\r\n  const output: OutputOptions[] | OutputOptions =\r\n    rollupOptions.output ||\r\n    outputs.filter(({ format }) => targets.includes(format as ModuleFormat));\r\n\r\n  const defaultOptions: Options = {\r\n    input: resolve(src),\r\n    external: [\"solid-js\", \"solid-js/web\", \"solid-js/store\", ...external],\r\n    output,\r\n    plugins: [\r\n      babel({\r\n        extensions,\r\n        babelHelpers: \"bundled\",\r\n        presets: [\r\n          [\"babel-preset-solid\", solidOptions || {}],\r\n          \"@babel/preset-typescript\",\r\n          [\"@babel/preset-env\", { bugfixes: true, targets: babelTargets }],\r\n        ],\r\n        ...babelOptions,\r\n      }),\r\n      nodeResolve({ extensions }),\r\n      {\r\n        name: \"ts\",\r\n        buildEnd() {\r\n          const program = ts.createProgram([resolve(src)], {\r\n            target: ts.ScriptTarget.ESNext,\r\n            module: ts.ModuleKind.ESNext,\r\n            moduleResolution: ts.ModuleResolutionKind.NodeJs,\r\n            jsx: ts.JsxEmit.Preserve,\r\n            jsxImportSource: \"solid-js\",\r\n            allowSyntheticDefaultImports: true,\r\n            esModuleInterop: true,\r\n            outDir: asSubPackage ? `dist/${name}` : `dist/source`,\r\n            declarationDir: asSubPackage ? `dist/${name}` : `dist/types`,\r\n            declaration: true,\r\n            allowJs: true,\r\n          });\r\n\r\n          program.emit();\r\n        },\r\n      },\r\n      {\r\n        name: \"instructions\",\r\n        buildEnd() {\r\n          if (!printInstructions) return;\r\n\r\n          const example = {\r\n            files: [\"dist\"],\r\n            main: asSubPackage\r\n              ? `dist/${name}/index.common.js`\r\n              : `dist/cjs/${name}.js`,\r\n            module: asSubPackage\r\n              ? `dist/${name}/index.module.js`\r\n              : `dist/esm/${name}.js`,\r\n            types: asSubPackage\r\n              ? `dist/${name}/${name}.d.ts`\r\n              : `dist/types/${name}.d.ts`,\r\n            exports: {\r\n              \".\": {\r\n                solid: asSubPackage\r\n                  ? `./dist/${name}/${name}.jsx`\r\n                  : `./dist/source/${name}.jsx`,\r\n                import: asSubPackage\r\n                  ? `./dist/${name}/index.module.js`\r\n                  : `./dist/esm/${name}.js`,\r\n                browser: asSubPackage\r\n                  ? `./dist/${name}/index.umd.js`\r\n                  : `./dist/umd/${name}.js`,\r\n                require: asSubPackage\r\n                  ? `./dist/${name}/index.common.js`\r\n                  : `./dist/cjs/${name}.js`,\r\n                node: asSubPackage\r\n                  ? `./dist/${name}/index.common.js`\r\n                  : `./dist/cjs/${name}.js`,\r\n              },\r\n            },\r\n          };\r\n\r\n          const hasFormat = (formats: ModuleFormat[]) => {\r\n            return Array.isArray(output)\r\n              ? output.find(({ format }) => formats.includes(format))\r\n              : formats.includes(output.format);\r\n          };\r\n\r\n          if (!hasFormat([\"cjs\", \"commonjs\"])) {\r\n            example.main = example.module;\r\n            example.exports[\".\"].require = example.exports[\".\"].import;\r\n            example.exports[\".\"].node = example.exports[\".\"].import;\r\n          }\r\n\r\n          if (!hasFormat([\"umd\"])) {\r\n            example.exports[\".\"].browser = example.exports[\".\"].import;\r\n          }\r\n\r\n          console.log();\r\n          console.log(\r\n            c.cyan(c.bold(\"Example config for your `package.json`:\"))\r\n          );\r\n          console.log();\r\n          console.log(c.green(JSON.stringify(example, null, 2)));\r\n          console.log();\r\n        },\r\n      },\r\n      {\r\n        name: \"generate\",\r\n        buildEnd() {\r\n          if (!writePackageJson) return;\r\n\r\n          const build = {\r\n            main: `index.common.js`,\r\n            module: `index.module.js`,\r\n            types: `${name}.d.ts`,\r\n            exports: {\r\n              \".\": {\r\n                solid: `./${name}.jsx`,\r\n                import: `./index.module.js`,\r\n                browser: `./index.umd.js`,\r\n                require: `./index.common.js`,\r\n                node: `./index.common.js`,\r\n              },\r\n            },\r\n          };\r\n\r\n          writeFileSync(\r\n            resolve(currentDir, \"dist\", name, \"package.json\"),\r\n            JSON.stringify(build, null, 2),\r\n            { encoding: \"utf8\" }\r\n          );\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  return mergeAndConcat(rollupOptions, defaultOptions) as RollupOptions;\r\n}\r\n\r\nexport default function withSolid(options: Options | Options[] = {}) {\r\n  rmSync(resolve(process.cwd(), \"dist\"), {\r\n    force: true,\r\n    recursive: true,\r\n  });\r\n\r\n  return Array.isArray(options)\r\n    ? options.map((option) => processOptions(option, true))\r\n    : processOptions(options, false);\r\n}\r\n\r\nexport interface Options extends RollupOptions {\r\n  /**\r\n   * Defines which target you want\r\n   * @default ['esm']\r\n   */\r\n  targets?: ModuleFormat[];\r\n  /**\r\n   * Whether to generate a package.json or not\r\n   * This is useful for sub packages\r\n   * @default false\r\n   */\r\n  writePackageJson?: boolean;\r\n  /**\r\n   * Whether to hint what to put in your package.json or not\r\n   * @default false\r\n   */\r\n  printInstructions?: boolean;\r\n  /**\r\n   * This can be used to override the default babel options\r\n   * The targets can be set in the \"browserslist\" field in your `package.json`.\r\n   * Beware the options are only merged at the top level.\r\n   * If you add babel presets you'll need to add the default one back (as you see fit).\r\n   * @default {\r\n   *   extensions,\r\n   *   babelHelpers: \"bundled\",\r\n   *   presets: [\"babel-preset-solid\", \"@babel/preset-typescript\", ['@babel/preset-env', { bugfixes: true, targets: \"last 2 years\" }]],\r\n   * }\r\n   */\r\n  babelOptions?: RollupBabelInputPluginOptions;\r\n  solidOptions?: SolidOptions;\r\n  /**\r\n   * TODO: Document this\r\n   */\r\n  mappingName?: string;\r\n}\r\n\r\ninterface SolidOptions {\r\n  /**\r\n   * The name of the runtime module to import the methods from.\r\n   *\r\n   * @default \"solid-js/web\"\r\n   */\r\n  moduleName?: string;\r\n\r\n  /**\r\n   * The output mode of the compiler.\r\n   * Can be:\r\n   * - \"dom\" is standard output\r\n   * - \"ssr\" is for server side rendering of strings.\r\n   *\r\n   * @default \"dom\"\r\n   */\r\n  generate?: \"ssr\" | \"dom\";\r\n\r\n  /**\r\n   * Indicate whether the output should contain hydratable markers.\r\n   *\r\n   * @default false\r\n   */\r\n  hydratable?: boolean;\r\n\r\n  /**\r\n   * Boolean to indicate whether to enable automatic event delegation on camelCase.\r\n   *\r\n   * @default true\r\n   */\r\n  delegateEvents?: boolean;\r\n\r\n  /**\r\n   * Boolean indicates whether smart conditional detection should be used.\r\n   * This optimizes simple boolean expressions and ternaries in JSX.\r\n   *\r\n   * @default true\r\n   */\r\n  wrapConditionals?: boolean;\r\n\r\n  /**\r\n   * Boolean indicates whether to set current render context on Custom Elements and slots.\r\n   * Useful for seemless Context API with Web Components.\r\n   *\r\n   * @default true\r\n   */\r\n  contextToCustomElements?: boolean;\r\n\r\n  /**\r\n   * Array of Component exports from module, that aren't included by default with the library.\r\n   * This plugin will automatically import them if it comes across them in the JSX.\r\n   *\r\n   * @default [\"For\",\"Show\",\"Switch\",\"Match\",\"Suspense\",\"SuspenseList\",\"Portal\",\"Index\",\"Dynamic\",\"ErrorBoundary\"]\r\n   */\r\n  builtIns?: string[];\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
